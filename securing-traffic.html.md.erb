---
title: Securing Traffic into Cloud Foundry
owner: Routing
---

<strong><%= modified_date %></strong>

This topic describes the options for securing HTTP traffic into your <%=vars.product_full%> <%=vars.product_abbr%> deployment with SSL/TLS certificates. You can configure the location where your deployment terminates TLS depending on your needs and certificate restrictions. 

<%=vars.ssl_config%>

## <a id="protocol_support"></a>Protocol Support

Gorouter supports HTTP/HTTPS requests only. For more information about features supported by the Gorouter, see the [HTTP Routing](../concepts/http-routing.html) topic.

To secure non-HTTP traffic over TCP Routing, terminate TLS at your load balancer or at the application. See [TCP Routing](enabling-tcp-routing.html) for details.

##<a id="ssl_options"></a>SSL/TLS Termination Options for HTTP Routing

There are three options for terminating SSL/TLS for HTTP traffic. You can terminate TLS at the Gorouter, your load balancer, or at both. 

The following table summarizes SSL/TLS termination options and which option to choose for your deployment.

<table border="1" class="nice">
<tr>
  <th>If the following applies to you:</th>
  <th>Then configure SSL/TLS termination at:</th>
  <th>Related topic and configuration procedure</th>
</tr>
<tr>
  <td>
    <ul>
      <li>You want the optimum balance of performance and security, and</li>
      <li>You want to make minimum changes to your load balancer.</li>
    </ul>
  </td>
  <td>Gorouter only
  </td>
  <td> <a href="#gorouter_term">Terminating SSL/TLS at the Gorouter Only</a>
  </td>
</tr>
<tr>
  <td>
    <ul>
      <li>You require TLS termination at a load balancer, and</li>
      <li>You want a higher level of security, and</li>
      <li>You do not mind a slightly less performant deployment</li>
  </td>
  <td>
   Load Balancer and Gorouter
  </td>
  <td><a href="#lb_and_gorouter_term">Terminating SSL/TLS at the Load Balancer and Gorouter</a>
  </td>
</tr>
<tr>
  <td>
    <ul>
      <li>You require TLS termination at a load balancer, and</li>
      <li>You would prefer traffic between Load Balancer and Gorouter is unencrypted.</li>
    </ul>
  </td>
  <td>Load Balancer only
  </td>
  <td><a href="#lb_term">Terminating SSL/TLS at the Load Balancer Only</a>
  </td>
</tr>
</table>

## <a id="certtypes"></a> Certificate Requirements

The following requirements apply to the certificates you use to secure traffic into <%=vars.product_short%><span>:</span>

* In a production environment, use a signed SSL/TLS certificate (trusted) from a known certificate authority (CA).
* In a development or testing environment, you can use a trusted CA certificate or a self-signed certificate generated with `openssl` or a similar tool. 
* If you must terminate TLS at your load balancer, you may optionally secure requests from the load balancer to the Gorouter by terminating TLS at the Gorouter also. To accomplish this configure your load balancer with the CA and hostname with which to validate the certificate hosted by the Gorouter.
* The Gorouter supports SNI and can be configured with multiple certificates, each which may optionally include wildcard and alternative names.
* The Gorouter supports mutual TLS; the Gorouter will validate a client provided certificate chain against its CA certificates if one is provided in the TLS handshake, but does not require it. Depending on whether you choose to terminate at both the load balancer and Gorouter, or at Gorouter alone, the client certificate may that of the load balancer or of the originating client.

## <a id="ciphers"></a> Cipher Suites

By default, Gorouter supports the following cipher suites:

* TLS\_ECDHE\_RSA\_WITH\_AES\_128\_GCM\_SHA256
* TLS\_ECDHE\_RSA\_WITH\_AES\_256\_GCM\_SHA384

<%= vars.cipher_suites %>

See the [Golang repository on Github](https://github.com/golang/go/blob/release-branch.go1.7/src/crypto/tls/cipher_suites.go#L269-L285) for more information about supported ciphers.

<p class="note"><strong>Note</strong>: ECDSA ciphers require a certificate and key for DSA, as opposed to RSA.</p>

##<a id="gorouter_term"></a>Terminating SSL/TLS at the Gorouter Only

In this configuration, the load balancer does not terminate TLS for CF domains at all. Instead, it passes through the underlying TCP connection to the Gorouter. 

This option is the recommended and more performant option, establishing and terminating a single TLS connection. 

The following diagram illustrates communication between the client, load balancer, Gorouter, and app.

<%= image_tag("pass-through.png") %>

Traffic between the load balancer and the Gorouter is encrypted only if the client request is encrypted.

### <a id="http_header_gorouter"></a>About HTTP Header Forwarding

If you terminate TLS/SSL at the Gorouter only, your load balancer will not send HTTP headers.

The Gorouter appends the `X-Forwarded-For` and `X-Forwarded-Proto` headers to requests forwarded to applications and platform system components. `X-Forwarded-For` will be set the IP of the source; depending on the behavior of your load balancer this may be the IP of your load balancer. In order for Gorouter to deliver the IP of the client to applications, configure your load balancer to forward the IP of the client or configure your load balancer to send the client IP using the PROXY protocol. Gorouter will set `X-Forwarded-Proto` to the scheme of the client request.

### <a id="pass-through"></a>Procedure: Gorouter Only

<% if vars.product_name == 'CF' %>
<%= partial 'ssl_termin_gorouter_oss' %>
<% else %>
<%= partial '../opsguide/ssl_termin_gorouter_pcf' %>
<% end %>

##<a id="lb_and_gorouter_term"></a>Terminating SSL/TLS at the Load Balancer and Gorouter

In this configuration two TLS connections are established: one from the client to the load balancer, and another from the load balancer to the Gorouter. This configuration secures all traffic between the load balancer and the Gorouter.

The following diagram illustrates communication between the client, load balancer, Gorouter, and app.

<%= image_tag("lb-and-router.png") %>

This option is less performant, but it does allow for termination at a load balancer as well as secure traffice between the load balancer and Gorouter. 

### <a id="cert_guidelines_lb_gorouter"></a> Certificate Guidelines

In this deployment scenario, the following guidelines apply:

- Certificates for the <%=vars.product_short%> domains must be stored on the load balancer, as well as on Gorouter.
- Generate certificates for your load balancer and Gorouter with different keys. If the key for the certificate on the Gorouter is compromised, then the certificate on the load balancer is not at risk, and vice versa.
- Configure your load balancer with the CA and hostname with which to validate the certificate hosted by the Gorouter.

### <a id="hostname_verfication"></a> About Hostname Verification 

Hostname verification between the load balancer and Gorouter is unnecessary when the load balancer is already configured with the Gorouter's IP address to correctly route the request. 

If the load balancer uses DNS resolution to route requests to the Gorouters, then you should enable hostname verification.

### <a id="http_header_lb_gorouter"></a> About HTTP Header Forwarding

If you terminate SSL/TLS at your load balancer, then you must configure the load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` HTTP headers to requests it sends to the Gorouter.

If you terminate SSL/TLS at your load balancer but it does not support HTTP, such that it cannot append HTTP headers, there is a workaround that is recommended **only if your load balancer does not accept unencrypted requests**. Configure your load balancer to send the client IP using the PROXY protocol, and enable PROXY in Gorouter. As the `X-Forwarded-Proto` header will not be present, configure Gorouter to force-set this header to 'HTTPS'. 

### <a id="lb-and-router"></a> Procedure: Load Balancer and Gorouter

<% if vars.product_name == 'CF' %>
<%= partial 'ssl_termin_gorouter_lb_oss' %>
<% else %>
<%= partial '../opsguide/ssl_termin_gorouter_lb_pcf' %>
<% end %>

##<a id="lb_term"></a> Terminating SSL/TLS at the Load Balancer Only

In this configuration, your load balancer terminates TLS, and passes unencrypted traffic to the Gorouter, which routes it to your app. Traffic between the load balancer and the Gorouter is not encrypted.

This option is not recommended you require traffic to be encrypted between the load balancer and the Gorouter. 

The following diagram illustrates communication between the client, load balancer, Gorouter and app.

<%= image_tag("lb.png") %>

### <a id="http_header_lb"></a> About HTTP Header Forwarding

If you terminate SSL/TLS at your load balancer, then you must also configure the load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` HTTP headers to the HTTP traffic it passes to the Gorouter.

If you terminate SSL/TLS at your load balancer but it does not support HTTP, such that it cannot append HTTP headers, there is a workaround that is recommended **only if your load balancer does not accept unencrypted requests**. Configure your load balancer to send the client IP using the PROXY protocol, and enable PROXY in Gorouter. As the `X-Forwarded-Proto` header will not be present, configure Gorouter to force-set this header to 'HTTPS'. 

### <a id="lb"></a> Procedure: Load Balancer Only

<% if vars.product_name == 'CF' %>
<%= partial 'ssl_termin_lb_only_oss' %>
<% else %>
<%= partial '../opsguide/ssl_termin_lb_only_pcf' %>
<% end %>

##<a id="sni"></a> Support for SNI

Gorouter's `router.tls_pem` property enables support for SNI which allows operators to configure gorouter with multiple certificates. This property replaces `router.ssl_key` and `router.ssl_cert` which were previously required to terminate SSL/TLS.

The `router.tls_pem` property supports both RSA and ECDSA certificates in PEM
encoding. This property is an array where each entry is a combination of
private key and certificate. In the case that a certificate chain is required,
the order should be: primary certificate, intermediate certificate, and root
certificate. The private key can be either appended or prepended.

```
 properties:
    router:
      tls_pem:
      - |
         -----BEGIN ENCRYPTED PRIVATE KEY-----
         MIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDg
         MBQGCCqGSIb3DQMHBAgD1kGN4ZslJgSCBMi1xk9jhlPxPc
         9g73NQbtqZwI+9X5OhpSg/2ALxlCCjbqvzgSu8gfFZ4yo+
         A .... MANY LINES LIKE THAT ....
         X0R+meOaudPTBxoSgCCM51poFgaqt4l6VlTN4FRpj+c/Wc
         blK948UAda/bWVmZjXfY4Tztah0CuqlAldOQBzu8TwE7WD
         H0ga/iLNvWYexG7FHLRiq5hTj0g9mUPEbeTXuPtOkTEb/0
         GEs=
         -----END ENCRYPTED PRIVATE KEY-----
         -----BEGIN CERTIFICATE-----
         MIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3Df
         BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVx
         aWRnaXRzIFB0eSBMdGQwHhcNMTExMjMxMDg1OTQ0WhcNMT
         A .... MANY LINES LIKE THAT ....
         JjyzfN746vaInA1KxYEeI1Rx5KXY8zIdj6a7hhphpj2E04
         C3Fayua4DRHyZOLmlvQ6tIChY0ClXXuefbmVSDeUHwc8Yu
         B7xxt8BVc69rLeHV15A0qyx77CLSj3tCx2IUXVqRs5mlSb
         vA==
         -----END CERTIFICATE-----
      - |
         -----BEGIN ENCRYPTED PRIVATE KEY-----
         MIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDg
         MBQGCCqGSIb3DQMHBAgD1kGN4ZslJgSCBMi1xk9jhlPxPc
         9g73NQbtqZwI+9X5OhpSg/2ALxlCCjbqvzgSu8gfFZ4yo+
         A .... MANY LINES LIKE THAT ....
         X0R+meOaudPTBxoSgCCM51poFgaqt4l6VlTN4FRpj+c/Wc
         blK948UAda/bWVmZjXfY4Tztah0CuqlAldOQBzu8TwE7WD
         H0ga/iLNvWYexG7FHLRiq5hTj0g9mUPEbeTXuPtOkTEb/0
         GEs=
         -----END ENCRYPTED PRIVATE KEY-----
         -----BEGIN CERTIFICATE-----
         MIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3Df
         BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVx
         aWRnaXRzIFB0eSBMdGQwHhcNMTExMjMxMDg1OTQ0WhcNMT
         A .... MANY LINES LIKE THAT ....
         JjyzfN746vaInA1KxYEeI1Rx5KXY8zIdj6a7hhphpj2E04
         C3Fayua4DRHyZOLmlvQ6tIChY0ClXXuefbmVSDeUHwc8Yu
         B7xxt8BVc69rLeHV15A0qyx77CLSj3tCx2IUXVqRs5mlSb
         vA==
         -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
         MIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3Df
         BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVx
         aWRnaXRzIFB0eSBMdGQwHhcNMTExMjMxMDg1OTQ0WhcNMT
         A .... MANY LINES LIKE THAT ....
         JjyzfN746vaInA1KxYEeI1Rx5KXY8zIdj6a7hhphpj2E04
         C3Fayua4DRHyZOLmlvQ6tIChY0ClXXuefbmVSDeUHwc8Yu
         B7xxt8BVc69rLeHV15A0qyx77CLSj3tCx2IUXVqRs5mlSb
         vA==
         -----END CERTIFICATE-----
```
The first certificate listed acts as the default certificate. This has the equivalent behavior as the previous property `router.ssl_cert` and `router.ssl_key`.

When TLS is enabled in gorouter, the behavior is as follows:

- If a client provides an SNI header with a ServerName that matches to a certificate in `router.tls_pem`, gorouter will return the matching certificate
- If a client provides an SNI header with a ServerName that does not match to a certificate in `router.tls_pem`, gorouter will return the default certificate
- If a client does not provide an SNI header and the requested hostname matches to a certificate in `router.tls_pem`, gorouter will return the matching certificate.
- If a client does not provide an SNI header and requested hostname does not match to a certificate in `router.tls_pem`, gorouter will return the default certificate.



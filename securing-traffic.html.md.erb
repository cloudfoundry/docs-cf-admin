---
title: Securing Traffic into Cloud Foundry
owner: Routing
---

<strong><%= modified_date %></strong>

This topic describes the options for securing HTTP traffic into your <%=vars.product_full%> <%=vars.product_abbr%> deployment with SSL/TLS certificates. You can configure the location where your deployment terminates TLS depending on your needs and certificate restrictions.

<%=vars.ssl_config%>

## <a id="protocol_support"></a>Protocol Support

Gorouter supports HTTP/HTTPS requests only. For more information about features supported by the Gorouter, see the [HTTP Routing](../concepts/http-routing.html) topic.

To secure non-HTTP traffic, terminate TLS at your load balancer or at the application. See [TCP Routing](enabling-tcp-routing.html) for details.

##<a id="ssl_options"></a>SSL/TLS Termination Options

There are three options for terminating SSL/TLS for HTTP traffic. You can terminate TLS at the Gorouter, your load balancer, or at both.

The following table summarizes SSL/TLS termination options and which option to choose for your deployment.

<table border="1" class="nice">
<tr>
  <th>If the following applies to you:</th>
  <th>Then configure SSL/TLS termination at:</th>
  <th>Related topic and configuration procedure</th>
  </tr>
  <tr>
  <td><ul><li>You want the most performant and recommended option, and </li>
  <li>You can use a single SAN certificate for all system and application domains for your deployment.</li>
  </ul></td>
  <td>
  Gorouter only
  </td>
  <td> <a href="#gorouter_term">Terminating SSL/TLS at the Gorouter Only</a>
  </td>
  <tr>
  <td><ul><li>You cannot use a single SAN certificate for all system and application domains for your deployment, or</li>
  <li>You require Extended Validation (EV) certificates.</li>
  </ul>
  </td>
  <td>Load Balancer only
  </td>
  <td><a href="#lb_term">Terminating SSL/TLS at the Load Balancer Only</a>
  </td>
  </tr>
  <tr>
  <td><ul><li>You want a higher level of security, and</li>
  <li>You do not mind a slightly less performant deployment, and</li>
  <li>You can use a single SAN certificate on the Gorouter, either for all system and application domains (but with a different key than for the same certificates hosted on your load balancer) or for a single domain (but with hostname verification disabled on the load balancer).</li>
  </td>
  <td>
   Load Balancer and Gorouter
  </td>
  <td><a href="#lb_and_gorouter_term">Terminating SSL/TLS at the Load Balancer and Gorouter</a>
  </td>
  </tr>
</tr>
</table>

## <a id="certtypes"></a> Certificate Requirements

The following requirements apply to the certificates you use to secure traffic into <%=vars.product_short%><span>:</span>

* In a production environment, use a signed SSL/TLS certificate (trusted) from a known certificate authority (CA).
* In a development or testing environment, you can use a trusted CA certificate or a self-signed certificate generated with `openssl` or a similar tool.
* The Gorouter currently only supports configuring a single HTTPS certificate. The certificate on the Gorouter must be associated with all the domains it may receive requests for so that HTTPS can validate the request. To associate multiple domains to a single certificate, including wildcard domains, use [Subject Alternative Name (SAN)](https://tools.ietf.org/html/rfc5280#section-4.2.1.6), an X.509 extension.
* If wildcard certificates are not supported for some or all of your domains, then terminate TLS at your load balancer.
* If you cannot use a SAN certificate, terminate TLS at your load balancer.
* Extended Validation (EV) certificates support multiple hostnames, like SAN, but do not support wildcards. For this reason, if EV certificates are required, then terminate TLS at the load balancer only.
* If you must terminate TLS at your load balancer, you may optionally secure requests from the load balancer to the Gorouter by terminating TLS at the Gorouter also. To accomplish this without using a SAN certificate on the Gorouter, you will have to disable hostname validation on the load balancer, as the domain in the certificate hosted by the Gorouter will not match requests forwarded to it for applications on <%=vars.product_full%> by the load balancer.

## <a id="ciphers"></a> Cipher Suites

By default Gorouter supports the following cipher suites, both of which require TLSv1.2:

<table>
  <tr>
    <th>RFC</th>
    <th>OpenSSL</th>
  </tr>
  <tr>
    <td>TLS_RSA_WITH_AES_128_GCM_SHA256</td>
    <td>AES128-GCM-SHA256</td>
  </tr>
  <tr>
    <td>TLS_RSA_WITH_AES_256_GCM_SHA384</td>
    <td>AES256-GCM-SHA384</td>
  </tr>
</table>

<%= vars.cipher_suites %>

The following cipher suites are optionally supported for TLS1.2 only:

<table>
  <tr>
    <th>RFC</th>
    <th>OpenSSL</th>
  </tr>
  <tr>
    <td>TLS_RSA_WITH_AES_128_GCM_SHA256</td>
    <td>AES128-GCM-SHA256</td>
  </tr>
  <tr>
    <td>TLS_RSA_WITH_AES_256_GCM_SHA384</td>
    <td>AES256-GCM-SHA384</td>
  </tr>
  <tr>
    <td>TLS_ECDHE_ECDSA_WITH_RC4_128_SHA</td>
    <td>ECDHE-ECDSA-RC4-SHA</td>
  </tr>
  <tr>
    <td>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</td>
    <td>ECDHE-ECDSA-AES128-SHA</td>
  </tr>
  <tr>
    <td>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</td>
    <td>ECDHE-ECDSA-AES256-SHA</td>
  </tr>
  <tr>
    <td>TLS_ECDHE_RSA_WITH_RC4_128_SHA</td>
    <td>ECDHE-RSA-RC4-SHA</td>
  </tr>
  <tr>
    <td>TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</td>
    <td>ECDHE-RSA-DES-CBC3-SHA</td>
  </tr>
  <tr>
    <td>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</td>
    <td>ECDHE-RSA-AES128-SHA</td>
  </tr>
  <tr>
    <td>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</td>
    <td>ECDHE-RSA-AES256-SHA</td>
  </tr>
  <tr>
    <td>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</td>
    <td>ECDHE-RSA-AES128-GCM-SHA256</td>
  </tr>
  <tr>
    <td>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</td>
    <td>ECDHE-ECDSA-AES128-GCM-SHA256</td>
  </tr>
  <tr>
    <td>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</td>
    <td>ECDHE-RSA-AES256-GCM-SHA384</td>
  </tr>
  <tr>
    <td>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</td>
    <td>ECDHE-ECDSA-AES256-GCM-SHA384</td>
  </tr>
</table>

The following cipher suites are optionally supported for TLS1.0 and 1.2 only:

<table border="1" class="nice">
  <tr>
    <th>RFC</th>
    <th>OpenSSL</th>
  </tr>
  <tr>
    <td>TLS_RSA_WITH_RC4_128_SHA</td>
    <td>RC4-SHA</td>
  </tr>
  <tr>
    <td>TLS_RSA_WITH_3DES_EDE_CBC_SHA</td>
    <td>DES-CBC3-SHA</td>
  </tr>
  <tr>
    <td>TLS_RSA_WITH_AES_128_CBC_SHA</td>
    <td>AES128-SHA</td>
  </tr>
  <tr>
    <td>TLS_RSA_WITH_AES_256_CBC_SHA</td>
    <td>AES256-SHA</td>
  </tr>
</table>


See [Golang Constants](https://github.com/golang/go/blob/release-branch.go1.7/src/crypto/tls/cipher_suites.go#L269-L285) and [OpenSSL Cipher Suites](https://www.openssl.org/docs/man1.0.2/apps/ciphers.html) for more information about supported ciphers.

<p class="note"><strong>Note</strong>: ECDSA ciphers require a certificate and key for DSA, as opposed to RSA.</p>

##<a id="gorouter_term"></a>Terminating SSL/TLS at the Gorouter Only

In this configuration, the load balancer does not terminate TLS for CF domains at all. Instead, it passes through the underlying TCP connection to the Gorouter.

This option is the recommended and more performant option, establishing and terminating a single TLS connection.

The following diagram illustrates communication between the client, load balancer, Gorouter, and app.

<%= image_tag("pass-through.png") %>

Traffic between the load balancer and the Gorouter is encrypted only if the client request is encrypted.

### <a id="cert_guidelines_gorouter"></a>Certificate Guidelines

* The Gorouter currently only supports configuring a single HTTPS certificate.
* Use a SAN certificate because <%=vars.product_short%> requires multiple wildcard domains.

### <a id="http_header_gorouter"></a>About HTTP Header Forwarding

The Gorouter appends the `X-Forwarded-For` and `X-Forwarded-Proto` headers to requests forwarded to applications and platform system components. `X-Forwarded-For` is set to the IP address of the client, and `X-Forwarded-Proto` to the scheme of the client request.

If you terminate TLS/SSL at the Gorouter only, you do not need to configure any additional HTTP header forwarding on your load balancer.

### <a id="pass-through"></a>Procedure: Gorouter Only

<% if vars.product_name == 'CF' %>
<%= partial 'ssl_termin_gorouter_oss' %>
<% else %>
<%= partial '../opsguide/ssl_termin_gorouter_pcf' %>
<% end %>

##<a id="lb_term"></a> Terminating SSL/TLS at the Load Balancer Only

In this configuration, your load balancer terminates TLS, and passes unencrypted traffic to the Gorouter, which routes it to your app. Traffic between the load balancer and the Gorouter is not encrypted.

This option is recommended if you cannot use SAN certificates and if you do not require traffic to be encrypted between the load balancer and the Gorouter.

The following diagram illustrates communication between the client, load balancer, Gorouter and app.

<%= image_tag("lb.png") %>

### <a id="cert_guidelines_lb"></a> Certificate Guidelines

You can use multiple certificates on your load balancer if the load balancer supports multiple VIPs or SNI.

### <a id="http_header_lb"></a> About HTTP Header Forwarding

If you terminate SSL/TLS at your load balancer, then you must also configure the load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` HTTP headers to the HTTP traffic it passes to the Gorouter.

### <a id="lb"></a> Procedure: Load Balancer Only

<% if vars.product_name == 'CF' %>
<%= partial 'ssl_termin_lb_only_oss' %>
<% else %>
<%= partial '../opsguide/ssl_termin_lb_only_pcf' %>
<% end %>

##<a id="lb_and_gorouter_term"></a>Terminating SSL/TLS at the Load Balancer and Gorouter

In this configuration two TLS connections are established: one from the client to the load balancer, and another from the load balancer to the Gorouter. This configuration secures all traffic between the load balancer and the Gorouter.

The following diagram illustrates communication between the client, load balancer, Gorouter, and app.

<%= image_tag("lb-and-router.png") %>

This option is less performant, but it does allow for use of multiple certificates under certain circumstances.

### <a id="cert_guidelines_lb_gorouter"></a> Certificate Guidelines

In this deployment scenario, the following guidelines apply:

- Certificates for the <%=vars.product_short%> domains must be stored on the load balancer.
- On the Gorouter you can use a SAN certificate for all domains, or a standard certificate for a single domain that the load balancer has been configured to trust. In the latter case, however, you must disable hostname validation on the load balancer, as the domain of the certificate served by the Gorouter will not match requests sent to applications on <%=vars.product_short%>.
- If you are concerned about hosting a certificate key on the Gorouter, you can generate certificates for your load balancer for the same domains with a different key. If the key for the certificate on the Gorouter is compromised, then the certificate on the load balancer is not at risk, and vice versa.

### <a id="hostname_verfication"></a> About Hostname Verification

Hostname verification between the load balancer and Gorouter is unnecessary when the load balancer is already configured with the Gorouter's IP address to correctly route the request.

If the load balancer uses DNS resolution to route requests to the Gorouters, then you should enable hostname verification.

### <a id="http_header_lb_gorouter"></a> About HTTP Header Forwarding

If you terminate SSL/TLS at your load balancer, then you must also configure the load balancer to append the `X-Forwarded-For` and `X-Forwarded-Proto` HTTP headers to requests it sends to the Gorouter.

### <a id="lb-and-router"></a> Procedure: Load Balancer and Gorouter

<% if vars.product_name == 'CF' %>
<%= partial 'ssl_termin_gorouter_lb_oss' %>
<% else %>
<%= partial '../opsguide/ssl_termin_gorouter_lb_pcf' %>
<% end %>
<<<<<<< 25aa5f8fead0b211116ab0b70e89d83aab7274a7
=======

##<a id="sni"></a> Support for SNI

Gorouter's `router.tls_pem` property enables support for SNI which allows operators to configure gorouter with multiple certificates. This property replaces `router.ssl_key` and `router.ssl_cert` which were previously required to terminate SSL/TLS.

The `router.tls_pem` property supports both RSA and ECDSA certificates in PEM encoding. This property is a list of entries with private keys followed by certificates. In the case that a certificate chain is required, the order should be: private key, primary certificate, intermediate certificate, and root certificate.

```
 properties:
    router:
      tls_pem:
      - |
         -----BEGIN ENCRYPTED PRIVATE KEY-----
         MIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDg
         MBQGCCqGSIb3DQMHBAgD1kGN4ZslJgSCBMi1xk9jhlPxPc
         9g73NQbtqZwI+9X5OhpSg/2ALxlCCjbqvzgSu8gfFZ4yo+
         A .... MANY LINES LIKE THAT ....
         X0R+meOaudPTBxoSgCCM51poFgaqt4l6VlTN4FRpj+c/Wc
         blK948UAda/bWVmZjXfY4Tztah0CuqlAldOQBzu8TwE7WD
         H0ga/iLNvWYexG7FHLRiq5hTj0g9mUPEbeTXuPtOkTEb/0
         GEs=
         -----END ENCRYPTED PRIVATE KEY-----
         -----BEGIN CERTIFICATE-----
         MIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3Df
         BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVx
         aWRnaXRzIFB0eSBMdGQwHhcNMTExMjMxMDg1OTQ0WhcNMT
         A .... MANY LINES LIKE THAT ....
         JjyzfN746vaInA1KxYEeI1Rx5KXY8zIdj6a7hhphpj2E04
         C3Fayua4DRHyZOLmlvQ6tIChY0ClXXuefbmVSDeUHwc8Yu
         B7xxt8BVc69rLeHV15A0qyx77CLSj3tCx2IUXVqRs5mlSb
         vA==
         -----END CERTIFICATE-----
      - |
         -----BEGIN ENCRYPTED PRIVATE KEY-----
         MIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDg
         MBQGCCqGSIb3DQMHBAgD1kGN4ZslJgSCBMi1xk9jhlPxPc
         9g73NQbtqZwI+9X5OhpSg/2ALxlCCjbqvzgSu8gfFZ4yo+
         A .... MANY LINES LIKE THAT ....
         X0R+meOaudPTBxoSgCCM51poFgaqt4l6VlTN4FRpj+c/Wc
         blK948UAda/bWVmZjXfY4Tztah0CuqlAldOQBzu8TwE7WD
         H0ga/iLNvWYexG7FHLRiq5hTj0g9mUPEbeTXuPtOkTEb/0
         GEs=
         -----END ENCRYPTED PRIVATE KEY-----
         -----BEGIN CERTIFICATE-----
         MIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3Df
         BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVx
         aWRnaXRzIFB0eSBMdGQwHhcNMTExMjMxMDg1OTQ0WhcNMT
         A .... MANY LINES LIKE THAT ....
         JjyzfN746vaInA1KxYEeI1Rx5KXY8zIdj6a7hhphpj2E04
         C3Fayua4DRHyZOLmlvQ6tIChY0ClXXuefbmVSDeUHwc8Yu
         B7xxt8BVc69rLeHV15A0qyx77CLSj3tCx2IUXVqRs5mlSb
         vA==
         -----END CERTIFICATE-----
        -----BEGIN CERTIFICATE-----
         MIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3Df
         BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVx
         aWRnaXRzIFB0eSBMdGQwHhcNMTExMjMxMDg1OTQ0WhcNMT
         A .... MANY LINES LIKE THAT ....
         JjyzfN746vaInA1KxYEeI1Rx5KXY8zIdj6a7hhphpj2E04
         C3Fayua4DRHyZOLmlvQ6tIChY0ClXXuefbmVSDeUHwc8Yu
         B7xxt8BVc69rLeHV15A0qyx77CLSj3tCx2IUXVqRs5mlSb
         vA==
         -----END CERTIFICATE-----
```
The first certificate listed acts as the default certificate. This has the equivalent behavior as the previous property `router.ssl_cert` and `router.ssl_key`.

When TLS is enabled in gorouter, the behavior is as follows:

- If a client provides an SNI header with a ServerName that matches to a certificate in `router.tls_pem`, gorouter will return the matching certificate
- If a client provides an SNI header with a ServerName that does not match to a certificate in `router.tls_pem`, gorouter will return the default certificate
- If a client does not provide an SNI header and the requested hostname matches to a certificate in `router.tls_pem`, gorouter will return the matching certificate.
- If a client does not provide an SNI header and requested hostname does not match to a certificate in `router.tls_pem`, gorouter will return the default certificate.
